# Repository Guidelines

## Project Structure & Module Organization
- `live_assistant.py` — launcher (prefers local `live_assistant_main.py`).
- `live_assistant_main.py` — core TUI, capture, ASR, and analysis logic.
- `prompt_library/` — Markdown prompt templates auto‑discovered at runtime.
- `install_and_run.sh` — Debian/Ubuntu bootstrap (apt + pip + optional Vosk model).
- Outputs: `~/recordings/session_YYYYmmdd_HHMMSS/` (`audio.wav`, `notes_*.md`, `assistant.log`).

## Build, Test, and Development Commands
- Run locally: `python3 live_assistant.py` (or `python3 live_assistant.py --help`).
- Install deps: `bash install_and_run.sh` (installs `ffmpeg`, `pactl`, `vosk`, `requests`).
- List devices (PulseAudio): `pactl list short sources` and `pactl list short sinks`.
- Example (non‑interactive): `OPENAI_API_KEY=... python3 live_assistant.py --source <pulse_source> --vosk-model-path ~/.cache/vosk-model-small-en-us-0.15`.

## Coding Style & Naming Conventions
- Python 3.10+ (tested on 3.12); 4‑space indent; follow PEP 8.
- Filenames/modules and functions use `snake_case`; classes use `CamelCase`.
- Keep UI responsive; avoid global state; pass config explicitly; prefer type hints and docstrings.

## Testing Guidelines
- No formal suite yet. If adding tests, use `pytest` under `tests/` with `test_*.py`.
- Target areas: prompt discovery, CLI arg parsing, and session file writing.
- Use temp dirs/fixtures; avoid real PulseAudio, network, or LLM calls.

## Commit & Pull Request Guidelines
- Use Conventional Commits: `feat:`, `fix:`, `docs:`, `refactor:`, `chore:`, `test:`.
- PRs should include: summary, rationale, run steps, env vars used, and TUI screenshots where helpful.
- Link issues, note breaking changes, and keep diffs focused.

## Security & Configuration Tips
- Never commit secrets. Set `OPENAI_API_KEY` via environment.
- Optional env: `OPENAI_BASE_URL`, `LLM_MODEL`/`OPENAI_MODEL`, `VOSK_MODEL_PATH`, `PROMPT_DIR`, `SUMMARY_PROMPT`.
- Scripts may download models to `~/.cache`; clean up when needed.

